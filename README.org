# turn off section numbering
#+OPTIONS: num:2
# turn off table of contents
#+OPTIONS: toc:nil
#+TITLE: FASTInterface
#+AUTHOR: Dustin Condon

* Overview
This defines a C++ interface for the AeroDyn modules of
openFAST. This interface is in the project *AeroDynCppInterface*.

Its main inputs are the hub kinematics and inflow velocity. Its main
outputs are the hub reaction loads and the blade node positions.

Additionally, there is the project *FASTInterface* which combines the
interface to AeroDyn with a simple two-mass drivetrain model, generator
controller, and pitch controller.

Note: AeroDyn has been modified to be able to include added mass
effects (the option to enable or disable added mass effect is made in
the initiliazation parameters). The version of AeroDyn that has been
modified is a bit old now (version 2.3.0).

* Populating the git submodules
There are two external git repositories that this project uses as
dependencies.

1. My own fork of openfast https://github.com/dustinjamescondon/openfast.git
2. Eigen https://gitlab.com/libeigen/eigen.git

For (1), the fork of openfast, this contains a branch called
"added-mass" which adds code for an openfast module called
"AeroDynInterface". "AeroDynInterface" exports key functions for
interacting with AeroDyn to be callable by C++. AeroDynInterface was
written by using AeroDynDriver as a starting point, because that
existing aerodyn module shows how to interact with AeroDyn's data
structures.

So before you build the project you'll need to populate these
submodules.  This can be done with the following git command:

git submodule update --init --recursive

Once the submodules have been populated, you can continue to building
the project.
* Building the project
In order to build the projects through Visual Studio, one needs to
have the Intel FORTRAN compiler from Intel. The current package
provided by Intel is called OneAPI. There are two parts that need to
be installed and linked to Visual Studio:
1. [[https://www.intel.com/content/www/us/en/developer/tools/oneapi/toolkits.html#base-kit][oneAPI Base Toolkit]]
2. [[https://www.intel.com/content/www/us/en/developer/tools/oneapi/toolkits.html#hpc-kit][HPC Toolkit]]

(Note there is a separate installer for the 32-bit version of the Base
Toolkit, if you would like to build for that target)

Then to build, open the solution file, and build the FASTRegistry
project first. This builds a code generation .exe that is used while
building AeroDyn. Once this has been built, just hit build on the
entire solution.

The .libs and DLLs will be place in /bin/<Platform>/<Configuration>.

* Project structure

** bin/
This is where all the .lib, .dll and .exe files are from each
project.

** docs/
The DOxygen-generated documentation for the FASTInterface project.

** extern/
This contains external libraries. The only library here is the
graphical library SFML, which is used in one of the tests that renders
where the blade nodes are on the screen as colored dots.

** FASTInterface/
This contains the source code for the FASTInterface project.

** modules/
contains git submodule repos used for the project. Most importantly,
this is where the openfast repository is found. The other module is
the linear algebra header library, Eigen.

A git submodule of the openfast git module is r-tests, which contains
a number of test input files and their expected results is found
within modules/openfast/reg_tests. These input files are used by tests
in the tests/ directory, so this must be populated before the tests
will work.

In order to populate the submodules, one can either:
1. "git clone --recurse-submodules <repository url>", if the FASTInterface repo hasn't been cloned yet.
2. "git submodule update --init --recursive", if the FASTInterface has already been cloned.

** tests/
Contains all the test projects and test python scripts. Note that all
the python script tests require the Release version of the projects to
be build, so make sure of that before running the python tests.

These are the items in the tests directory:

*** resources
Contains some AeroDyn input files that the test will load from.

*** ADInterfaceTest
Contains unit tests for succesfully loading the input files found
in tests/resources and initializing things.

*** DriverTest
This executable reads in simulation parameters for AerDyn from the
command line parameters. These parameters are:

1. simulation time
2. time step
3. hub radius
4. number of blades
5. precone angle
6. blade pitch
7. constant uniform inflow speed
8. rotor shaft speed

The AeroDyn input file is currently hardcoded to be a version of the
OC4 Hywind turbine, which has a fluid density and kinematic fluid
viscosity appropriate to water. A TODO could be to make the input file
one of the parameters.

This test is useful for comparing with an unmodified AeroDyn driver
output file, because the parameters that can be set from the command
line arguments and the parameters set in the Aerodyn driver input file
are the same.

*** FASTInterface_Test [depricated]
C++ proj that simulates a fixed nacelle and renders the blade node
positions using the SFML library.
*** MassSpringDamper_Test [depricated]
C++ proj that reads in command line arguments for simulation
parameters and attaches the nacelle to the end of a spring mass
damper.
*** CantileveredBeam_Test [depricated]
A Python script that uses MassSpringDamper_Test's executable, and sets
the spring coefficient according to a cantilevered beam. It runs two
simulations with the same parameters, but one with added mass enabled,
and one without added mass enabled. Then the results are plotted
against each other.
* Building the DOxygen-generated documentation
The comments of the FASTInterface project are written with DOxygen in
mind. DOxygen parses the source files, and if the comments are of the
correct format, generates an html document outlining the classes and
functions of the project. In order to do this generation using Cygwin,
change the directory to the root of the project, and enter "doxygen
doxygen.conf" This will populate the docs/ directory with the
documentation.
* To Do List [0/4] 
- [ ] Cleanup error checking: right now only the initialization
  functions can throw an exception caused by an error from the FORTRAN
  layer of the project. Errors can happen within any of the FORTRAN
  layer subroutines, but most of them aren't reported to the C++ layer
  of the project. <2020-08-31 Mon>

- [ ] The drive currently integrates its states using Heun's
  method. Currently not sure if this is accurate enough. If it isn't,
  switch to using RK4. <2020-08-31 Mon>

- [ ] Investigate the initial spike in force shown during the
  CantileveredBeam_Test results. Is this related to the initialization
  code? <2020-08-31 Mon>

  + [ ] Look over the initialization code for AeroDyn and the drive
    train. <2020-08-31 Mon>

- [ ] Test the interpolation/extrapolation code in AeroDynTurbine. The
  current tests don't cause any interpolation or extrapolation,
  becaues the driver program (taking the place of ProteusDS) use the
  same timestep as the FASTInterface. Once timesteps are different,
  then values will need to be interpolated and extrapolated, and the
  code that does this hasn't really been tested yet. <2020-08-31 Mon>
